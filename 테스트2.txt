import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { 
    getFirestore, 
    collection, 
    onSnapshot, 
    addDoc, 
    deleteDoc, 
    doc,
    query,
    where,
    getDocs,
    Timestamp
} from 'firebase/firestore';
import { 
    getAuth, 
    signInAnonymously, 
    onAuthStateChanged,
    signInWithCustomToken
} from 'firebase/auth';

// 아이콘 라이브러리 (Lucide React)
const ChevronLeft = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="m15 18-6-6 6-6"/></svg>
);
const ChevronRight = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="m9 18 6-6-6-6"/></svg>
);
const X = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
);
const Clock = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>
);
const CalendarIcon = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>
);
const Users = (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
);
const DoorOpen = (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M13 4h3a2 2 0 0 1 2 2v14"/><path d="M2 20h3"/><path d="M13 20h9"/><path d="M10 12v.01"/><path d="M13 4.00002C11.2372 4.4263 10 5.99827 10 8v12h3V4.00002Z"/></svg>
);


// --- Firebase 설정 ---
// 아래 설정은 Canvas 환경에서 자동으로 제공됩니다.
const firebaseConfig = typeof __firebase_config !== 'undefined' 
    ? JSON.parse(__firebase_config) 
    : { apiKey: "YOUR_API_KEY", authDomain: "YOUR_AUTH_DOMAIN", projectId: "YOUR_PROJECT_ID" };

const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-meeting-room-app';

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// --- 샘플 데이터 ---
const ROOMS = [
    { id: 'room1', name: '대회의실 (101호)', color: 'blue', capacity: 12 },
    { id: 'room2', name: '소회의실 (203호)', color: 'green', capacity: 6 },
    { id: 'room3', name: '세미나실 (305호)', color: 'purple', capacity: 20 },
    { id: 'room4', name: '집중업무실 (401호)', color: 'orange', capacity: 4 },
];

// --- 헬퍼 함수 ---
const getStartOfWeek = (date) => {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // 주의 시작을 월요일로
    return new Date(d.setDate(diff));
};

const addDays = (date, days) => {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
};

const isSameDay = (d1, d2) => {
    return d1.getFullYear() === d2.getFullYear() &&
           d1.getMonth() === d2.getMonth() &&
           d1.getDate() === d2.getDate();
};


// --- 컴포넌트 ---

// 로딩 스피너 컴포넌트
const Spinner = () => (
    <div className="flex justify-center items-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
    </div>
);

// 예약 모달 컴포넌트
const ReservationModal = ({ isOpen, onClose, selectedSlot, onReserve, onDelete, reservations, userId }) => {
    const [title, setTitle] = useState('');
    const [roomId, setRoomId] = useState(ROOMS[0].id);
    const [error, setError] = useState('');

    const reservation = useMemo(() => {
        return reservations.find(r => r.id === selectedSlot?.reservationId);
    }, [selectedSlot, reservations]);

    useEffect(() => {
        if (isOpen) {
            setError('');
            if (reservation) {
                setTitle(reservation.title);
                setRoomId(reservation.roomId);
            } else {
                setTitle('');
                setRoomId(ROOMS[0].id);
            }
        }
    }, [isOpen, reservation]);

    const handleReserve = async () => {
        if (!title.trim()) {
            setError('회의 목적을 입력해주세요.');
            return;
        }

        const newReservation = {
            roomId,
            title: title.trim(),
            start: selectedSlot.start,
            end: selectedSlot.end,
        };

        // 중복 예약 확인
        const q = query(
            collection(db, `artifacts/${appId}/public/data/reservations`),
            where('roomId', '==', roomId),
            where('start', '<', Timestamp.fromDate(newReservation.end)),
            where('end', '>', Timestamp.fromDate(newReservation.start))
        );
        
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
            setError('해당 시간에 이미 다른 예약이 있습니다.');
            return;
        }

        onReserve(newReservation);
    };
    
    const handleDelete = () => {
        if (reservation) {
            onDelete(reservation.id);
        }
    };


    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl p-6 md:p-8 w-full max-w-md transform transition-all">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">
                        {reservation ? '예약 정보' : '회의실 예약'}
                    </h2>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
                        <X className="w-6 h-6" />
                    </button>
                </div>

                <div className="space-y-4">
                    <div>
                        <label htmlFor="room" className="text-sm font-medium text-gray-700 flex items-center mb-1"><DoorOpen className="w-4 h-4 mr-2"/>회의실</label>
                        <select
                            id="room"
                            value={roomId}
                            onChange={(e) => setRoomId(e.target.value)}
                            disabled={!!reservation}
                            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
                        >
                            {ROOMS.map(room => (
                                <option key={room.id} value={room.id}>{room.name}</option>
                            ))}
                        </select>
                    </div>

                    <div>
                        <label htmlFor="title" className="text-sm font-medium text-gray-700 flex items-center mb-1"><Users className="w-4 h-4 mr-2"/>회의 목적</label>
                        <input
                            type="text"
                            id="title"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            disabled={!!reservation}
                            placeholder="예: 주간 기획 회의"
                            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
                        />
                    </div>

                    <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-md">
                        <div className="flex items-center mb-1"><CalendarIcon className="w-4 h-4 mr-2 text-gray-500" /> <strong>날짜:</strong>&nbsp; {selectedSlot.start.toLocaleDateString('ko-KR')}</div>
                        <div className="flex items-center"><Clock className="w-4 h-4 mr-2 text-gray-500" /> <strong>시간:</strong>&nbsp; {selectedSlot.start.getHours()}:00 - {selectedSlot.end.getHours()}:00</div>
                        {reservation && <div className="mt-2 text-xs text-gray-500"><strong>예약자:</strong> {reservation.userId.substring(0, 8)}...</div>}
                    </div>

                    {error && <p className="text-red-500 text-sm">{error}</p>}
                </div>
                
                <div className="mt-6 flex flex-col sm:flex-row-reverse gap-3">
                    {!reservation ? (
                        <button onClick={handleReserve} className="w-full sm:w-auto inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            예약하기
                        </button>
                    ) : (
                        userId === reservation.userId && (
                            <button onClick={handleDelete} className="w-full sm:w-auto inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                예약 취소
                            </button>
                        )
                    )}
                    <button onClick={onClose} className="w-full sm:w-auto inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        닫기
                    </button>
                </div>
            </div>
        </div>
    );
};

// 캘린더 뷰 컴포넌트
const CalendarView = ({ currentDate, reservations, onSlotSelect }) => {
    const startOfWeek = useMemo(() => getStartOfWeek(currentDate), [currentDate]);
    const today = new Date();

    const renderHeader = () => {
        const days = ['월', '화', '수', '목', '금', '토', '일'];
        return (
            <div className="grid grid-cols-8">
                <div className="p-2 border-b border-r"></div>
                {days.map(day => (
                    <div key={day} className="text-center font-bold p-2 border-b">
                        <span className="hidden sm:inline">{day}요일</span>
                        <span className="sm:hidden">{day}</span>
                    </div>
                ))}
            </div>
        );
    };

    const renderTimeSlots = () => {
        const hours = Array.from({ length: 12 }, (_, i) => i + 9); // 9시부터 20시까지
        return hours.map(hour => (
            <div key={hour} className="grid grid-cols-8 h-20">
                <div className="flex items-center justify-center p-1 text-xs sm:text-sm border-r border-b">
                    {hour}:00
                </div>
                {Array.from({ length: 7 }).map((_, dayIndex) => {
                    const cellDate = addDays(startOfWeek, dayIndex);
                    cellDate.setHours(hour, 0, 0, 0);
                    const slotStart = cellDate;
                    const slotEnd = new Date(slotStart.getTime() + 60 * 60 * 1000);
                    
                    const reservationsInSlot = reservations.filter(r => 
                        r.start < slotEnd && r.end > slotStart && isSameDay(r.start, cellDate)
                    );
                    
                    const isPast = slotEnd < new Date();

                    return (
                        <div 
                            key={dayIndex} 
                            onClick={() => !isPast && onSlotSelect({ start: slotStart, end: slotEnd, reservationId: reservationsInSlot[0]?.id })}
                            className={`border-b border-r p-1 overflow-hidden relative ${isPast ? 'bg-gray-100 cursor-not-allowed' : 'cursor-pointer hover:bg-blue-50'}`}
                        >
                            {reservationsInSlot.map(res => {
                                const room = ROOMS.find(r => r.id === res.roomId);
                                return (
                                    <div key={res.id} 
                                         className={`text-white text-xs p-1 rounded-md mb-1 bg-${room?.color}-500`}
                                         style={{backgroundColor: room?.color}}
                                         >
                                        <p className="font-bold truncate">{res.title}</p>
                                        <p className="truncate hidden sm:block">{room?.name}</p>
                                    </div>
                                );
                            })}
                        </div>
                    );
                })}
            </div>
        ));
    };

    return (
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            <div className="grid grid-cols-8">
                <div className="p-2 border-r border-b"></div>
                {Array.from({ length: 7 }).map((_, i) => {
                    const day = addDays(startOfWeek, i);
                    const isToday = isSameDay(day, today);
                    return (
                        <div key={i} className={`text-center p-2 border-b ${isToday ? 'bg-blue-100' : ''}`}>
                            <p className="font-bold">{day.getDate()}</p>
                        </div>
                    );
                })}
            </div>
            {renderHeader()}
            {renderTimeSlots()}
        </div>
    );
};


// 메인 앱 컴포넌트
export default function App() {
    const [currentDate, setCurrentDate] = useState(new Date());
    const [reservations, setReservations] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedSlot, setSelectedSlot] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [userId, setUserId] = useState(null);

    // Firebase 인증 상태 리스너
    useEffect(() => {
        const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {
            if (user) {
                setUserId(user.uid);
            } else {
                try {
                    if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                         await signInWithCustomToken(auth, __initial_auth_token);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("익명 로그인 실패:", error);
                }
            }
        });
        return () => unsubscribeAuth();
    }, []);
    
    // 예약 데이터 실시간 구독
    useEffect(() => {
        if (!userId) return;

        setIsLoading(true);
        const q = collection(db, `artifacts/${appId}/public/data/reservations`);
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const reservationsData = querySnapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
                start: doc.data().start.toDate(),
                end: doc.data().end.toDate(),
            }));
            setReservations(reservationsData);
            setIsLoading(false);
        }, (error) => {
            console.error("예약 데이터 가져오기 실패:", error);
            setIsLoading(false);
        });

        return () => unsubscribe();
    }, [userId]);

    const handlePrevWeek = () => {
        setCurrentDate(addDays(currentDate, -7));
    };

    const handleNextWeek = () => {
        setCurrentDate(addDays(currentDate, 7));
    };
    
    const handleToday = () => {
        setCurrentDate(new Date());
    };

    const handleSlotSelect = (slot) => {
        setSelectedSlot(slot);
        setIsModalOpen(true);
    };

    const handleReserve = async (newReservationData) => {
        if (!userId) {
            alert('로그인이 필요합니다.');
            return;
        }
        try {
            await addDoc(collection(db, `artifacts/${appId}/public/data/reservations`), {
                ...newReservationData,
                userId: userId,
                createdAt: Timestamp.now()
            });
            setIsModalOpen(false);
        } catch (error) {
            console.error("예약 추가 실패:", error);
            alert("예약에 실패했습니다. 다시 시도해주세요.");
        }
    };
    
    const handleDelete = async (reservationId) => {
        if(window.confirm('정말로 이 예약을 취소하시겠습니까?')) {
            try {
                await deleteDoc(doc(db, `artifacts/${appId}/public/data/reservations`, reservationId));
                setIsModalOpen(false);
            } catch (error) {
                console.error("예약 취소 실패:", error);
                alert("예약 취소에 실패했습니다.");
            }
        }
    };

    const startOfWeek = getStartOfWeek(currentDate);
    const endOfWeek = addDays(startOfWeek, 6);

    return (
        <div className="bg-gray-50 min-h-screen font-sans p-4 sm:p-6 lg:p-8">
            <div className="max-w-7xl mx-auto">
                <header className="mb-6">
                    <h1 className="text-3xl font-bold text-gray-800">회의실 예약</h1>
                    <p className="text-gray-500 mt-1">실시간으로 회의실을 예약하고 관리하세요.</p>
                    {userId && <p className="text-xs text-gray-400 mt-2">사용자 ID: {userId}</p>}
                </header>

                <div className="flex flex-col sm:flex-row justify-between items-center mb-4 p-4 bg-white rounded-lg shadow">
                    <div className="flex items-center space-x-2">
                        <button onClick={handlePrevWeek} className="p-2 rounded-full hover:bg-gray-200"><ChevronLeft /></button>
                        <button onClick={handleNextWeek} className="p-2 rounded-full hover:bg-gray-200"><ChevronRight /></button>
                        <button onClick={handleToday} className="px-4 py-2 text-sm font-medium border border-gray-300 rounded-md hover:bg-gray-100">
                            오늘
                        </button>
                    </div>
                    <h2 className="text-lg font-semibold my-2 sm:my-0">
                        {startOfWeek.getFullYear()}년 {startOfWeek.getMonth() + 1}월 {startOfWeek.getDate()}일 - {endOfWeek.getMonth() + 1}월 {endOfWeek.getDate()}일
                    </h2>
                    <div className="flex flex-wrap gap-2 justify-center">
                        {ROOMS.map(room => (
                            <div key={room.id} className="flex items-center text-xs">
                                <span className={`w-3 h-3 rounded-full mr-1.5`} style={{backgroundColor: room.color}}></span>
                                {room.name}
                            </div>
                        ))}
                    </div>
                </div>

                {isLoading ? <Spinner /> : <CalendarView currentDate={currentDate} reservations={reservations} onSlotSelect={handleSlotSelect} />}
                
                <ReservationModal 
                    isOpen={isModalOpen} 
                    onClose={() => setIsModalOpen(false)} 
                    selectedSlot={selectedSlot}
                    onReserve={handleReserve}
                    onDelete={handleDelete}
                    reservations={reservations}
                    userId={userId}
                />
            </div>
        </div>
    );
}
